#!/usr/bin/env bash

# This script prepares a initramfs that can boot a NodeOS usersfs


set -o pipefail


GRN="\e[32m"
CLR="\e[0m"


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh &&
source scripts/utils.sh                    || exit $?

PATH=$TOOLCHAIN/bin:$PATH


# Build cross-compiler (if needed)
(
  cd $TOOLCHAIN

  # We can't use `--arch=$NODE_ARCH` because `prebuild` would install a
  # cross-compiler for a diferent host platform, so we set the desired target
  # platform using environment variables instead
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit 1
) || exit $?


# Default: multiple users system
if [[ "$SINGLE_USER" ]]; then
  OUT_NAME=${CPU}_${SINGLE_USER}
else
  OUT_NAME=${CPU}

  SINGLE_USER=nodeos-boot-multiUser
fi


#
# Define steps paths
#

NODE_PLATFORM=linux

OUT_DIR=`pwd`/out/$OUT_NAME
OBJ_DIR=${OBJECTS}_${SINGLE_USER}
PREBUILD=prebuilds/$NODE_PLATFORM-$NODE_ARCH.tar.gz


#
# FUSE
#

SRC_FUSE=`node -p "require('libfuse')"`

(
  cd $SRC_FUSE && eval "$NPMi" || exit 10
) || err $?


#
# System dependencies
#

STEP_DIR=$OBJ_DIR

if [[ ! -d $STEP_DIR ]]; then
  echo -e "${WHT}Generating initramfs${CLR}"

  rmStep $OUT_DIR


  # Install FUSE

  SRC_FUSE=$SRC_FUSE/out/$CPU

  mkdir -p                     $STEP_DIR/lib &&
  cp $SRC_FUSE/lib/libfuse.so* $STEP_DIR/lib || exit 20


  # Install usrbinenv

  eval "$NPMi" -g usrbinenv || err 21

  mkdir -p             $STEP_DIR/usr/bin     &&
  ln -fs ../../bin/env $STEP_DIR/usr/bin/env || err 22


  #
  # Install system init
  #

  eval "$NPMi" -g $SINGLE_USER --has_libblkid=false \
      --fuse__include_dirs=$SRC_FUSE/include/fuse   \
      --fuse__library_dirs=$SRC_FUSE/lib            \
      --fuse__libraries=-lfuse                      || err 23

  mkdir -p $STEP_DIR/sbin || err 24

  # Set `/sbin/init` to package binary or `server.js` file
  MODULE=lib/node_modules/$SINGLE_USER
  PACKAGE_JSON=$STEP_DIR/$MODULE/package.json
  SERVER=$MODULE/server.js

  (
    BIN=bin/`pkg-bin $PACKAGE_JSON` && \
    ls $STEP_DIR/$BIN               && \
    ln -fs ../$BIN $STEP_DIR/sbin/init
  ) \
  || \
  (
    ls $STEP_DIR/$SERVER && \
    ln -fs ../$SERVER $STEP_DIR/sbin/init
  ) \
  || exit 25

  echo -e "${GRN}Successfully generated initramfs${CLR}"
fi


#
# Wrap the system up and pack it
#

STEP_DIR=$OUT_DIR

# Set initramfs files only accesible to root
chmod -R u-w,go-rw "$OBJ_DIR"                            &&
chmod -R o+r       "$OBJ_DIR/lib/node_modules/usrbinenv" &&
chmod -R o+r       "$OBJ_DIR/usr/bin/env"                || exit 30

if [[ ! -f $STEP_DIR ]]; then
  rmStep $PREBUILD

  mkdir -p `dirname $STEP_DIR`

  (
    # TODO on single user systems, set user files user:group to `1:1`. This
    # would require to set the global ones to `0:0` before adding the user ones.
    # Other option is to use the npm `cpio-stream`module
    cd "$OBJ_DIR"                             &&
    find | cpio --owner 0:0 -o -H newc | gzip || exit 40
  ) > $STEP_DIR || err $?
fi

ln -sf $OUT_NAME out/latest || err 41


echo -e "${GRN}Successfully built 'initramfs'${CLR}"
